pipeline {
    agent any

    tools {
        jdk 'Java17'
        maven 'Maven3'
    }

    environment {
        APP_NAME = "gestion-clubs"
        RELEASE = "1.0.0"
        DOCKER_USER = "wafa23"
        DOCKER_PASS = credentials("DOCKER_HUB_PASSWORD")
        IMAGE_NAME = "${DOCKER_USER}/${APP_NAME}"
        IMAGE_TAG = "${RELEASE}-${BUILD_NUMBER}"
        JENKINS_API_TOKEN = credentials("JENKINS_API_TOKEN")
    }

    stages {
        stage("Cleanup Workspace") {
            steps { cleanWs() }
        }

        stage("Checkout from SCM") {
            steps {
                git branch: 'main', credentialsId: 'github', url: 'https://github.com/wafaabbes/micro-auth'
            }
        }

        stage("Install Dependencies") {
            steps {
                sh 'npm install'
            }
        }

        stage("Unit Tests") {
            steps {
                sh 'npm run test:unit'
            }
        }

        stage("Integration Tests") {
            steps {
                sh 'npm run test:integration'
            }
        }

        stage("SonarQube Analysis") {
            steps {
                script {
                    withSonarQubeEnv('jenkins-sonarqube-token') {
                        sh '''
                        sonar-scanner \
                        -Dsonar.projectKey=gestion-clubs \
                        -Dsonar.sources=src \
                        -Dsonar.host.url=http://SONARQUBE_URL \
                        -Dsonar.login=SONARQUBE_TOKEN
                        '''
                    }
                }
            }
        }

        stage("Quality Gate") {
            steps {
                script {
                    waitForQualityGate abortPipeline: true
                }
            }
        }

        stage("Build & Push Docker Image") {
            steps {
                script {
                    docker.withRegistry('https://index.docker.io/v1/', 'DOCKER_HUB_CREDENTIALS') {
                        docker_image = docker.build("${IMAGE_NAME}")
                        docker_image.push("${IMAGE_TAG}")
                        docker_image.push('latest')
                    }
                }
            }
        }

        stage("Trivy Scan") {
            steps {
                script {
                    sh "docker run -v /var/run/docker.sock:/var/run/docker.sock aquasec/trivy image ${IMAGE_NAME}:${IMAGE_TAG} --severity HIGH,CRITICAL --exit-code 1"
                }
            }
        }

        stage("Cleanup Artifacts") {
            steps {
                script {
                    sh "docker rmi ${IMAGE_NAME}:${IMAGE_TAG}"
                    sh "docker rmi ${IMAGE_NAME}:latest"
                }
            }
        }

        stage("Trigger CD Pipeline") {
            steps {
                script {
                    sh """
                    curl -v -k --user wafa:${JENKINS_API_TOKEN} -X POST \
                    -H 'cache-control: no-cache' \
                    -H 'content-type: application/x-www-form-urlencoded' \
                    --data 'IMAGE_TAG=${IMAGE_TAG}' \
                    'http://JENKINS_SERVER:8080/job/deploy-auth-service/buildWithParameters?token=deploy-token'
                    """
                }
            }
        }
    }

    post {
        always {
            echo 'üß™ Tests termin√©s.'
        }
        failure {
            echo '‚ùå √âchec du pipeline. Voir les logs.'
            emailext body: '''${SCRIPT, template="groovy-html.template"}''',
                     subject: "${env.JOB_NAME} - Build # ${env.BUILD_NUMBER} - Failed",
                     mimeType: 'text/html',
                     to: "wafaabbes453@gmail.com"
        }
        success {
            echo '‚úÖ Pipeline termin√© avec succ√®s.'
            emailext body: '''${SCRIPT, template="groovy-html.template"}''',
                     subject: "${env.JOB_NAME} - Build # ${env.BUILD_NUMBER} - Successful",
                     mimeType: 'text/html',
                     to: "wafaabbes453@gmail.com"
        }
    }
}
