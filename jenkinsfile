pipeline {
    agent any

    environment {
        DOCKER_IMAGE = "micro-auth"
        DOCKER_TAG = "${env.BUILD_ID}"  // Utilisation du numéro de build comme tag
        K8S_NAMESPACE = "mon-namespace"
        K8S_DEPLOYMENT_FILE = "k8s/deployment.yaml"
    }

    stages {
        stage('Checkout') {
            steps {
                echo 'Récupération du code depuis GitHub'
                checkout([
                    $class: 'GitSCM',
                    branches: [[name: '*/main']],
                    extensions: [],
                    userRemoteConfigs: [[url: 'https://github.com/wafaabbes/micro-auth.git']]
                ])
            }
        }

        stage('Build') {
            steps {
                echo 'Construction de l\'image Docker'
                script {
                    // Utilisation de BuildKit pour de meilleures performances
                    sh 'DOCKER_BUILDKIT=1 docker build -t ${DOCKER_IMAGE}:${DOCKER_TAG} .'
                }
            }
        }

        stage('Test') {
            steps {
                echo 'Exécution des tests unitaires'
                script {
                    // Installation en mode développement seulement
                    sh 'npm ci --only=development'
                    sh 'npm run test'
                    
                    // Archivage des résultats des tests
                    junit 'junit.xml'  // Assurez-vous que Jest génère ce fichier
                }
            }
        }

        stage('Deploy') {
            steps {
                echo 'Déploiement sur Kubernetes'
                script {
                    // Taggage et push de l'image (optionnel)
                    // sh 'docker push ${DOCKER_IMAGE}:${DOCKER_TAG}'
                    
                    // Déploiement Kubernetes avec mise à jour de l'image
                    sh """
                        kubectl set image deployment/micro-auth \
                        micro-auth=${DOCKER_IMAGE}:${DOCKER_TAG} \
                        --namespace=${K8S_NAMESPACE} --record
                    """
                }
            }
        }
    }

    post {
        success {
            echo 'Pipeline exécuté avec succès!'
            // Ici vous pourriez ajouter une notification Slack
        }
        failure {
            echo 'Échec du pipeline'
            // Ici vous pourriez ajouter une notification Slack
        }
        always {
            // Nettoyage des conteneurs et images
            sh 'docker system prune -f'
        }
    }
}
