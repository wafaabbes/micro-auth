pipeline {
    agent any

    environment {
        DOCKER_IMAGE = "micro-auth"
        DOCKER_TAG = "${env.BUILD_ID}"
        K8S_NAMESPACE = "mon-namespace"
        K8S_DEPLOYMENT_FILE = "k8s/deployment.yaml"
    }

    stages {
        stage('Checkout') {
            steps {
                echo 'Récupération du code depuis GitHub'
                checkout scm  // Version simplifiée
            }
        }

        stage('Build') {
            steps {
                echo 'Construction de l\'image Docker'
                script {
                    // Version standard sans BuildKit
                    sh 'docker build -t ${DOCKER_IMAGE}:${DOCKER_TAG} .'
                }
            }
        }

        stage('Test') {
            steps {
                echo 'Exécution des tests unitaires'
                script {
                    sh 'npm install --only=development'  // Version plus simple que npm ci
                    sh 'npm run test'
                    
                    // Archivage des résultats si le fichier existe
                    junit allowEmptyResults: true, testResults: 'junit.xml'
                }
            }
        }

        stage('Deploy') {
            steps {
                echo 'Déploiement sur Kubernetes'
                script {
                    // Version simplifiée sans push Docker
                    sh """
                        kubectl set image deployment/micro-auth \
                        micro-auth=${DOCKER_IMAGE}:${DOCKER_TAG} \
                        -n ${K8S_NAMESPACE}
                    """
                }
            }
        }
    }

    post {
        success {
            echo 'Pipeline réussi!'
            // slackSend channel: '#deployments', message: "Succès: ${env.JOB_NAME} #${env.BUILD_NUMBER}"
        }
        failure {
            echo 'Échec du pipeline'
            // slackSend channel: '#deployments', message: "Échec: ${env.JOB_NAME} #${env.BUILD_NUMBER}"
        }
        always {
            // Nettoyage plus sélectif
            sh 'docker system prune -f --filter "until=24h"'
        }
    }
}
