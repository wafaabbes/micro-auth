pipeline {
    agent any

    tools {
        nodejs 'NodeJS_20' // Configur√© dans Jenkins > Global Tools
    }

    environment {
        APP_NAME = "micro-auth" // Chang√© pour correspondre au repo
        RELEASE = "1.0.0"
        DOCKER_USER = "wafa23"
        IMAGE_NAME = "${DOCKER_USER}/${APP_NAME}"
        IMAGE_TAG = "${RELEASE}-${BUILD_NUMBER}"
        SONAR_HOST = "http://localhost:9000"
    }

    stages {
        stage("Cleanup Workspace") {
            steps { cleanWs() }
        }

        stage("Checkout from SCM") {
            steps {
                git branch: 'main', 
                credentialsId: 'github', 
                url: 'https://github.com/wafaabbes/micro-auth.git'
            }
        }

        stage("Install Dependencies") {
            steps {
                sh 'npm install'
            }
        }

        stage("Unit Tests") {
            steps {
                sh 'npm run test:unit'
            }
        }

        stage("Integration Tests") {
            steps {
                sh 'npm run test:integration'
            }
        }

        stage("SonarQube Analysis") {
            steps {
                withSonarQubeEnv('jenkins-sonarqube-token') {
                    sh """
                    sonar-scanner \
                      -Dsonar.projectKey=${APP_NAME} \
                      -Dsonar.sources=src \
                      -Dsonar.host.url=${SONAR_HOST} \
                      -Dsonar.login=${SONAR_TOKEN}
                    """
                }
            }
        }

        stage("Quality Gate") {
            steps {
                waitForQualityGate abortPipeline: true
            }
        }

        stage("Build & Push Docker Image") {
            steps {
                script {
                    docker.withRegistry('https://index.docker.io/v1/', 'docker-hub-credentials') {
                        def dockerImage = docker.build("${IMAGE_NAME}")
                        dockerImage.push("${IMAGE_TAG}")
                        dockerImage.push('latest')
                    }
                }
            }
        }

        stage("Trivy Scan") {
            steps {
                sh "docker run --rm -v /var/run/docker.sock:/var/run/docker.sock aquasec/trivy image ${IMAGE_NAME}:${IMAGE_TAG} --severity HIGH,CRITICAL --exit-code 1"
            }
        }

        stage("Cleanup Artifacts") {
            steps {
                sh "docker rmi ${IMAGE_NAME}:${IMAGE_TAG} || true"
                sh "docker rmi ${IMAGE_NAME}:latest || true"
            }
        }

        stage("Trigger CD Pipeline") {
            steps {
                script {
                    withCredentials([string(credentialsId: 'jenkins-api-token', variable: 'JENKINS_API_TOKEN')]) {
                        sh """
                        curl -v -k --user wafa:${JENKINS_API_TOKEN} -X POST \
                        -H 'cache-control: no-cache' \
                        -H 'content-type: application/x-www-form-urlencoded' \
                        --data-urlencode IMAGE_TAG=${IMAGE_TAG} \
                        'http://JENKINS_SERVER:8080/job/deploy-auth-service/buildWithParameters?token=deploy-token'
                        """
                    }
                }
            }
        }
    }

    post {
        always {
            echo 'üß™ Tests termin√©s.'
        }
        failure {
            echo '‚ùå √âchec du pipeline. Voir les logs.'
            emailext(
                body: '''${SCRIPT, template="groovy-html.template"}''',
                subject: "${env.JOB_NAME} - Build #${env.BUILD_NUMBER} - ‚ùå √âchec",
                mimeType: 'text/html',
                to: "wafaabbes453@gmail.com"
            )
        }
        success {
            echo '‚úÖ Pipeline termin√© avec succ√®s.'
            emailext(
                body: '''${SCRIPT, template="groovy-html.template"}''',
                subject: "${env.JOB_NAME} - Build #${env.BUILD_NUMBER} - ‚úÖ Succ√®s",
                mimeType: 'text/html',
                to: "wafaabbes453@gmail.com"
            )
        }
    }
}
